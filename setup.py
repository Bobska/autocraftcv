#!/usr/bin/env python
"""
AutoCraftCV Setup Script
Automates the initial setup of the AutoCraftCV Django application.
"""

import os
import sys
import subprocess
import secrets
from pathlib import Path

def run_command(command, description):
    """Run a shell command and handle errors."""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print(f"‚úÖ {description} completed successfully")
        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error during {description}:")
        print(f"   Command: {command}")
        print(f"   Error: {e.stderr}")
        return None

def create_env_file():
    """Create .env file with default values."""
    print("\nüîÑ Creating .env file...")
    
    env_content = f"""# AutoCraftCV Environment Configuration
# Generated by setup script

# Django Settings
SECRET_KEY={secrets.token_urlsafe(50)}
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# App Configuration
APP_VERSION=free  # Options: free, paid

# Database (default: SQLite)
# For production, use PostgreSQL or MySQL
DATABASE_URL=sqlite:///db.sqlite3

# Email Configuration (optional)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
EMAIL_HOST=
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=

# File Upload Settings
MAX_UPLOAD_SIZE=10485760  # 10MB in bytes

# Free Version - No API keys needed!
# The following are only needed for PAID version:

# AI Content Generation APIs (for paid version)
OPENAI_API_KEY=
ANTHROPIC_API_KEY=

# Enhanced Job Scraping APIs (for paid version)
SCRAPINGBEE_API_KEY=
DIFFBOT_API_KEY=

# Professional Resume Parsing APIs (for paid version)
AFFINDA_API_KEY=
RCHILLI_API_KEY=

# Rate Limiting (requests per minute)
SCRAPING_RATE_LIMIT=10
AI_GENERATION_RATE_LIMIT=5

# Security Settings
SECURE_SSL_REDIRECT=False  # Set to True in production with HTTPS
SECURE_HSTS_SECONDS=0      # Set to 31536000 in production
"""
    
    env_path = Path('.env')
    if env_path.exists():
        print("‚ö†Ô∏è  .env file already exists. Backing up to .env.backup")
        env_path.rename('.env.backup')
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ .env file created successfully")
    print("üìù Edit .env file to configure API keys for paid version")

def check_python_version():
    """Check if Python version is compatible."""
    print("üîç Checking Python version...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8 or higher is required")
        print(f"   Current version: {version.major}.{version.minor}.{version.micro}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} is compatible")
    return True

def setup_virtual_environment():
    """Create and activate virtual environment."""
    if os.path.exists('venv'):
        print("‚ö†Ô∏è  Virtual environment already exists, skipping creation")
        return True
    
    result = run_command("python -m venv venv", "Creating virtual environment")
    return result is not None

def install_dependencies():
    """Install required Python packages."""
    # Determine the correct pip path based on OS
    if os.name == 'nt':  # Windows
        pip_path = "venv\\Scripts\\pip"
    else:  # Unix/Linux/macOS
        pip_path = "venv/bin/pip"
    
    result = run_command(f"{pip_path} install -r requirements.txt", 
                        "Installing dependencies")
    return result is not None

def setup_database():
    """Create database migrations and apply them."""
    # Determine the correct python path based on OS
    if os.name == 'nt':  # Windows
        python_path = "venv\\Scripts\\python"
    else:  # Unix/Linux/macOS
        python_path = "venv/bin/python"
    
    # Create migrations
    result1 = run_command(f"{python_path} manage.py makemigrations", 
                         "Creating database migrations")
    if not result1:
        return False
    
    # Apply migrations
    result2 = run_command(f"{python_path} manage.py migrate", 
                         "Applying database migrations")
    return result2 is not None

def collect_static_files():
    """Collect static files for deployment."""
    if os.name == 'nt':  # Windows
        python_path = "venv\\Scripts\\python"
    else:  # Unix/Linux/macOS
        python_path = "venv/bin/python"
    
    result = run_command(f"{python_path} manage.py collectstatic --noinput", 
                        "Collecting static files")
    return result is not None

def create_superuser():
    """Prompt to create a superuser account."""
    print("\nüë§ Would you like to create a superuser account? (y/n): ", end="")
    choice = input().lower().strip()
    
    if choice in ['y', 'yes']:
        if os.name == 'nt':  # Windows
            python_path = "venv\\Scripts\\python"
        else:  # Unix/Linux/macOS
            python_path = "venv/bin/python"
        
        print("\nüîÑ Creating superuser account...")
        print("Follow the prompts to create your admin account:")
        os.system(f"{python_path} manage.py createsuperuser")
        print("‚úÖ Superuser account created")
    else:
        print("‚è≠Ô∏è  Skipping superuser creation (you can create one later with 'python manage.py createsuperuser')")

def create_directories():
    """Create necessary directories."""
    directories = ['media', 'media/uploads', 'static']
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
    print("‚úÖ Created necessary directories")

def main():
    """Main setup function."""
    print("üöÄ AutoCraftCV Setup Script")
    print("=" * 50)
    
    # Check if we're in the right directory
    if not Path('manage.py').exists():
        print("‚ùå manage.py not found. Please run this script from the project root directory.")
        sys.exit(1)
    
    # Step 1: Check Python version
    if not check_python_version():
        sys.exit(1)
    
    # Step 2: Create environment file
    create_env_file()
    
    # Step 3: Create directories
    create_directories()
    
    # Step 4: Setup virtual environment
    if not setup_virtual_environment():
        print("‚ùå Failed to create virtual environment")
        sys.exit(1)
    
    # Step 5: Install dependencies
    if not install_dependencies():
        print("‚ùå Failed to install dependencies")
        sys.exit(1)
    
    # Step 6: Setup database
    if not setup_database():
        print("‚ùå Failed to setup database")
        sys.exit(1)
    
    # Step 7: Collect static files
    if not collect_static_files():
        print("‚ùå Failed to collect static files")
        sys.exit(1)
    
    # Step 8: Create superuser (optional)
    create_superuser()
    
    # Final success message
    print("\n" + "=" * 50)
    print("üéâ Setup completed successfully!")
    print("\nüìã Next steps:")
    
    if os.name == 'nt':  # Windows
        print("   1. Activate virtual environment: venv\\Scripts\\activate")
        print("   2. Start development server: python manage.py runserver")
    else:  # Unix/Linux/macOS
        print("   1. Activate virtual environment: source venv/bin/activate")
        print("   2. Start development server: python manage.py runserver")
    
    print("   3. Open browser to: http://127.0.0.1:8000")
    print("   4. For paid version: Edit .env file with your API keys")
    print("   5. Admin panel: http://127.0.0.1:8000/admin")
    print("\nüìñ Read README.md for detailed usage instructions")
    print("üêõ For issues, check the troubleshooting section in README.md")

if __name__ == "__main__":
    main()
